写在前面：
	使用切面编程，需要 切点+通知
	首先需要定义一个切面，并且定义切面中的方法
	随后给方法加上通知类型，比如前置，后置，环绕等
	然后在通知里定义切入点，切入点也有四种
	当切入点是注解方式时，需要额外创建一个注解类，并将注解加在需要调用切面的方法上面

tips相关知识点：
	一：切入点的种类：	
	1. bean(bean的ID)	按照对象匹配			粗粒度
	2. within(包名.类名)	按类匹配					粗粒度
	3. execution(返回值类型		包名.类名.方法名(参数列表))	万能用法     按照方法匹配		细粒度
	4. @annotation(包名.类名.注解名)		按照注解匹配				细粒度
			自定义注解的方法：
			1）	@Target(ElementType.METHOD)//元注解	修饰注解的注解
					@Retention(RetentionPolicy.RUNTIME)//运行期有效
			2）	然后用	@注解名 加在需要实现aop的方法上面
	注意：切入点可以直接写在通知的里面；也可以写在一个方法上的@Pointcut注解里面，需要的通知里面写该方法名
				//另外，自定义的注解可以直接加到参数中去，但是只能位于第二位
				例如：@Around("@annotation(cacheFind)")		//CacheFind是自定义的注解类
							public Object cacheAround(ProceedingJoinPoint joinPoint,CacheFind cacheFind) {...}
	二：通知方法
	目标方法：用户真正执行业务的方法
	1.前置通知@Before		在目标方法执行之前，执行前置通知
	2.后置通知@After		在目标方法执行之后，执行后置通知
	3.异常通知@AfterThrowing		在目标方法执行之后报了异常，执行异常通知
	4.最终通知@AfterReturning		无论代码执行的执行是否正确，都要执行的通知
	5.环绕通知@Around		在目标方法执行前后，都要执行的通知方法，并且功能是最强大的，因为只有环绕通知可以控制目标方法是否执行
						环绕通知需要调用原方法	joinPoint.proceed()，并将原方法的返回值返回出去


举例：
	定义注解类：

	@Target(ElementType.METHOD)//元注解	修饰注解的注解
	@Retention(RetentionPolicy.RUNTIME)//运行期有效
	public @interface CacheFind {	//注解中方法即属性

		String key() default "";
		
		int seconds() default 0;	//0 用户不需要设定超时时间
	}


	定义切面类：

	@Component	//将对象交给spring容器管理
	@Aspect		//标识切面类
	@Slf4j
	public class RedisAOP {
		
		@Autowired(required = false)
		private JedisCluster jedis;	//引入集群
		
		/**
		 * 案例要求：
		 * 	1.拦截itemCatServiceImpl的对象
		 */
		
		//1.配置切入点表达式
		@Pointcut("bean(itemCatServiceImpl)")
		public void pointcut() {
			
		}
		
		//定义前置通知	反射包的接口
		@Before("pointcut()")		//joinPoint  spring为方法提供了一个工具API接口（反射原理）
		public void before(JoinPoint joinPoint) {
			//System.out.println("我是前置通知");
			Object target = joinPoint.getTarget();	//获取目标对象
			Object[] objs = joinPoint.getArgs();	//动态获取参数
			String methodName = joinPoint.getSignature().getName();		//获取目标方法的名称
			//System.out.println(target);
			//System.out.println(objs);
			//System.out.println(methodName);
		}
		
		//service中的全部的方法  记录方法的执行时间
		
		@Around("execution(* com.jt.service..*(..))")
		public Object timeAround(ProceedingJoinPoint joinPoint) {
			long startTime=System.currentTimeMillis();
			try {
				//动态获取方法的类名
				String className=joinPoint.getSignature().getDeclaringTypeName();
				//获取目标方法的名称
				String methodName = joinPoint.getSignature().getName();
				Object obj = joinPoint.proceed();
				long endTime=System.currentTimeMillis();
				//System.out.println(className+"."+methodName+"的的执行时间："+(endTime-startTime));
				log.info("{"+className+"."+methodName+"的的执行时间："+(endTime-startTime)+"}");
				return obj;
			} catch (Throwable e) {
				e.printStackTrace();
				throw new RuntimeException();
			}
		} 
		
		/**
		 * 业务：如果方法中添加了@CacheFind注解，则该注解标识的方法，实现缓存的业务逻辑
		 * 切入点表达式：拦截注解
		 * 通知选择：控制目标方法是否执行！！	环绕通知
		 * 参数必须添加：ProceedingJoinPoint
		 */
		//可以直接将注解添加到参数中，参数只能位于第二位
		@Around("@annotation(cacheFind)")
		public Object cacheAround(ProceedingJoinPoint joinPoint,CacheFind cacheFind) {
			//System.out.println("我是aop");
			//1.动态的获取key
			String key =getKey(joinPoint, cacheFind); 
			//System.out.println("key="+key);
			//2.引入缓存，实现业务操作
			String value = jedis.get(key);
			//System.out.println("value="+value);
			Object obj=null;
			if(StringUtils.isEmpty(value)) {
				//缓存中没有数据，需要查询数据库
				try {
					obj= joinPoint.proceed();//执行目标方法
					String json = ObjectMapperUtil.toJSON(obj);			
					//根据用户自己设定的超时时间，实现赋值操作
					if(cacheFind.seconds()>0) {
						jedis.setex(key, cacheFind.seconds(), json);
					}else {
						jedis.set(key, json);
					}
				} catch (Throwable e) {
					e.printStackTrace();
					throw new RuntimeException();
				}
			}else {
				//缓存中有记录，可以利用缓存直接返回
				//利用反射机制动态获取返回值
				
				Class<?> targetClass=getReturnType(joinPoint);
				//System.out.println(targetClass.getName());
				obj = ObjectMapperUtil.toObject(value, targetClass);
				//System.out.println("obj="+obj);
			}
			return obj;
		}

		private Class<?> getReturnType(ProceedingJoinPoint joinPoint) {
			MethodSignature signature = (MethodSignature)joinPoint.getSignature();
			//System.out.println(signature.getReturnType());
			return signature.getReturnType();
		}

		private String getKey(ProceedingJoinPoint joinPoint, CacheFind cacheFind) {
			if(!StringUtils.isEmpty(cacheFind.key())) {
				return cacheFind.key();
			}
			//key应该自动生成
			String className=joinPoint.getSignature().getDeclaringTypeName();
			String methodName = joinPoint.getSignature().getName();
			//动态获取第一个参数	简化操作
			Object arg0 = joinPoint.getArgs()[0];
			
			return className+"."+methodName+"::"+arg0;
		}
	}